declare namespace wasm_bindgen {
	/* tslint:disable */
	/* eslint-disable */
	/**
	*/
	export class EpoxyClient {
	/**
	** Return copy of self without private attributes.
	*/
	  toJSON(): Object;
	/**
	* Return stringified version of self.
	*/
	  toString(): string;
	  free(): void;
	/**
	* @param {string} wisp_url
	* @param {EpoxyClientOptions} options
	*/
	  constructor(wisp_url: string, options: EpoxyClientOptions);
	/**
	* @returns {Promise<void>}
	*/
	  replace_stream_provider(): Promise<void>;
	/**
	* @param {string} url
	* @param {object} options
	* @returns {Promise<Response>}
	*/
	  fetch(url: string, options: object): Promise<Response>;
	/**
	*/
	  redirect_limit: number;
	/**
	*/
	  user_agent: string;
	}
	/**
	*/
	export class EpoxyClientOptions {
	  free(): void;
	/**
	*/
	  constructor();
	/**
	*/
	  redirect_limit: number;
	/**
	*/
	  udp_extension_required: boolean;
	/**
	*/
	  user_agent: string;
	/**
	*/
	  websocket_protocols: (string)[];
	/**
	*/
	  wisp_v2: boolean;
	}
	/**
	*/
	export class EpoxyHandlers {
	  free(): void;
	/**
	*/
	  onclose: Function;
	/**
	*/
	  onerror: Function;
	/**
	*/
	  onmessage: Function;
	/**
	*/
	  onopen: Function;
	}
	/**
	*/
	export class IntoUnderlyingByteSource {
	  free(): void;
	/**
	* @param {ReadableByteStreamController} controller
	*/
	  start(controller: ReadableByteStreamController): void;
	/**
	* @param {ReadableByteStreamController} controller
	* @returns {Promise<any>}
	*/
	  pull(controller: ReadableByteStreamController): Promise<any>;
	/**
	*/
	  cancel(): void;
	/**
	*/
	  readonly autoAllocateChunkSize: number;
	/**
	*/
	  readonly type: string;
	}
	/**
	*/
	export class IntoUnderlyingSink {
	  free(): void;
	/**
	* @param {any} chunk
	* @returns {Promise<any>}
	*/
	  write(chunk: any): Promise<any>;
	/**
	* @returns {Promise<any>}
	*/
	  close(): Promise<any>;
	/**
	* @param {any} reason
	* @returns {Promise<any>}
	*/
	  abort(reason: any): Promise<any>;
	}
	/**
	*/
	export class IntoUnderlyingSource {
	  free(): void;
	/**
	* @param {ReadableStreamDefaultController} controller
	* @returns {Promise<any>}
	*/
	  pull(controller: ReadableStreamDefaultController): Promise<any>;
	/**
	*/
	  cancel(): void;
	}
	
}

declare type InitInput = RequestInfo | URL | Response | BufferSource | WebAssembly.Module;

declare interface InitOutput {
  readonly __wbg_epoxyclientoptions_free: (a: number) => void;
  readonly __wbg_get_epoxyclientoptions_wisp_v2: (a: number) => number;
  readonly __wbg_set_epoxyclientoptions_wisp_v2: (a: number, b: number) => void;
  readonly __wbg_get_epoxyclientoptions_udp_extension_required: (a: number) => number;
  readonly __wbg_set_epoxyclientoptions_udp_extension_required: (a: number, b: number) => void;
  readonly __wbg_get_epoxyclientoptions_websocket_protocols: (a: number, b: number) => void;
  readonly __wbg_set_epoxyclientoptions_websocket_protocols: (a: number, b: number, c: number) => void;
  readonly __wbg_get_epoxyclientoptions_redirect_limit: (a: number) => number;
  readonly __wbg_set_epoxyclientoptions_redirect_limit: (a: number, b: number) => void;
  readonly __wbg_get_epoxyclientoptions_user_agent: (a: number, b: number) => void;
  readonly __wbg_set_epoxyclientoptions_user_agent: (a: number, b: number, c: number) => void;
  readonly epoxyclientoptions_new_default: () => number;
  readonly __wbg_epoxyhandlers_free: (a: number) => void;
  readonly __wbg_get_epoxyhandlers_onopen: (a: number) => number;
  readonly __wbg_set_epoxyhandlers_onopen: (a: number, b: number) => void;
  readonly __wbg_get_epoxyhandlers_onclose: (a: number) => number;
  readonly __wbg_set_epoxyhandlers_onclose: (a: number, b: number) => void;
  readonly __wbg_get_epoxyhandlers_onerror: (a: number) => number;
  readonly __wbg_set_epoxyhandlers_onerror: (a: number, b: number) => void;
  readonly __wbg_get_epoxyhandlers_onmessage: (a: number) => number;
  readonly __wbg_set_epoxyhandlers_onmessage: (a: number, b: number) => void;
  readonly __wbg_epoxyclient_free: (a: number) => void;
  readonly __wbg_get_epoxyclient_redirect_limit: (a: number) => number;
  readonly __wbg_set_epoxyclient_redirect_limit: (a: number, b: number) => void;
  readonly __wbg_get_epoxyclient_user_agent: (a: number, b: number) => void;
  readonly __wbg_set_epoxyclient_user_agent: (a: number, b: number, c: number) => void;
  readonly epoxyclient_new: (a: number, b: number, c: number, d: number) => void;
  readonly epoxyclient_replace_stream_provider: (a: number) => number;
  readonly epoxyclient_fetch: (a: number, b: number, c: number, d: number) => number;
  readonly ring_core_0_17_8_bn_mul_mont: (a: number, b: number, c: number, d: number, e: number, f: number) => void;
  readonly __wbg_intounderlyingbytesource_free: (a: number) => void;
  readonly intounderlyingbytesource_type: (a: number, b: number) => void;
  readonly intounderlyingbytesource_autoAllocateChunkSize: (a: number) => number;
  readonly intounderlyingbytesource_start: (a: number, b: number) => void;
  readonly intounderlyingbytesource_pull: (a: number, b: number) => number;
  readonly intounderlyingbytesource_cancel: (a: number) => void;
  readonly __wbg_intounderlyingsource_free: (a: number) => void;
  readonly intounderlyingsource_pull: (a: number, b: number) => number;
  readonly intounderlyingsource_cancel: (a: number) => void;
  readonly __wbg_intounderlyingsink_free: (a: number) => void;
  readonly intounderlyingsink_write: (a: number, b: number) => number;
  readonly intounderlyingsink_close: (a: number) => number;
  readonly intounderlyingsink_abort: (a: number, b: number) => number;
  readonly memory: WebAssembly.Memory;
  readonly __wbindgen_malloc: (a: number, b: number) => number;
  readonly __wbindgen_realloc: (a: number, b: number, c: number, d: number) => number;
  readonly __wbindgen_export_3: WebAssembly.Table;
  readonly _dyn_core__ops__function__Fn__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h6d1b645522ff0e04: (a: number, b: number, c: number) => void;
  readonly _dyn_core__ops__function__Fn_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h8764162ff6b03223: (a: number, b: number) => void;
  readonly _dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h630aa7568ecde248: (a: number, b: number, c: number) => void;
  readonly _dyn_core__ops__function__FnMut_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h9cc586f5753bc99b: (a: number, b: number) => void;
  readonly __wbindgen_add_to_stack_pointer: (a: number) => number;
  readonly __wbindgen_free: (a: number, b: number, c: number) => void;
  readonly __wbindgen_exn_store: (a: number) => void;
  readonly wasm_bindgen__convert__closures__invoke2_mut__h31623c0e33519f49: (a: number, b: number, c: number, d: number) => void;
  readonly __wbindgen_thread_destroy: (a?: number, b?: number) => void;
  readonly __wbindgen_start: () => void;
}

/**
* If `module_or_path` is {RequestInfo} or {URL}, makes a request and
* for everything else, calls `WebAssembly.instantiate` directly.
*
* @param {InitInput | Promise<InitInput>} module_or_path
* @param {WebAssembly.Memory} maybe_memory
*
* @returns {Promise<InitOutput>}
*/
declare function wasm_bindgen (module_or_path?: InitInput | Promise<InitInput>, maybe_memory?: WebAssembly.Memory): Promise<InitOutput>;
